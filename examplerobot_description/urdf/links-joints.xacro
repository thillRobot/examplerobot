<?xml version="1.0" ?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:macro name="fixed_joint" params="name type axis_xyz origin_rpy origin_xyz parent child ">
    <joint name="${name}" type="${type}">
      <axis xyz="${axis_xyz}" />
      <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
      <parent link="${parent}" />
      <child link="${child}" />
    </joint>
  </xacro:macro>

  <xacro:macro name="rev_joint" params="name type axis_xyz origin_rpy origin_xyz parent child limit_e limit_l limit_u limit_v "> <!--ai alphai di "> -->
    <joint name="${name}" type="${type}">
      <axis xyz="${axis_xyz}" />
      <limit effort="${limit_e}" lower="${limit_l}" upper="${limit_u}" velocity="${limit_v}" />
      <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
      <parent link="${parent}" />
      <child link="${child}" />
      <kinematic>
        <limits effort="100" lower="-3.14" upper="3.14" velocity="1"/>
        <dynamics damping="0.1" friction="0.1"/>
      </kinematic>
      <ddasda!!sdh param="0.0" a="0.0" alpha="0.0" d="0.0" theta="0.0" />
    </joint>
    <transmission name="trans_${name}">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${name}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="motor_${name}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>
  
  <!-- macro for base link from stl - the base_link does not need inertial parameter because it does not move -->
  <xacro:macro name="ref_link_mesh" params="name origin_xyz origin_rpy meshfile meshscale ">
    <link name="${name}">
      <collision>
        <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
        <geometry>
          <mesh filename="${meshfile}" scale="${meshscale}"/>
        </geometry>
          <surface>
          <contact>
            <collide_bitmask>0x11</collide_bitmask>
          </contact>
        </surface>
      </collision>
      <visual>
        <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
        <geometry>
          <mesh filename="${meshfile}" scale="${meshscale}"/>
        </geometry>
        <material name="light_black"/>
      </visual>
    </link>
  </xacro:macro>

  <!-- macro for general link from stl -->
  <xacro:macro name="link_mesh" params="name origin_xyz origin_rpy meshfile meshscale mass ixx ixy ixz iyy iyz izz">
    <link name="${name}">
      <inertial>
        <mass value="${mass}" />
        <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
        <inertia ixx="${ixx}" ixy="${ixy}" ixz="${ixz}" iyy="${iyy}" iyz="${iyz}" izz="${izz}" />
      </inertial>
      <collision>
        <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
        <geometry>
          <mesh filename="${meshfile}" scale="${meshscale}"/>
        </geometry>
         <surface>
          <contact>
            <collide_bitmask>0xFFFF</collide_bitmask>
          </contact>
          <friction>
            <ode>
              <mu>0.5</mu>
              <mu2>0.5</mu2>
            </ode>
          </friction>
        </surface>
      </collision>
      <visual>
        <origin rpy="${origin_rpy}" xyz="${origin_xyz}" />
        <geometry>
          <mesh filename="${meshfile}" scale="${meshscale}"/>
        </geometry>
        <material name="light_black"/>
      </visual>
    </link>
  </xacro:macro>

  <gazebo>
   <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
    <robotNamespace>/examplerobot</robotNamespace>
   </plugin>
  </gazebo>

</robot>
